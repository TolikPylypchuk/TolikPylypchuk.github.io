<section class="row justify-content-center mt-4">
    <div class="col-md-3 d-inline-flex justify-content-md-center">
        <h2 class="animate-count display-2 mx-2" style=@this.YearsOfTotalExperienceStyle></h2>
        <p class="align-self-center">years of total <br /> experience</p>
    </div>
    <div class="col-md-3 d-inline-flex justify-content-md-center">
        <h2 class="animate-count display-2 mx-2" style=@this.YearsOfCommercialExperienceStyle></h2>
        <p class="align-self-center">years of commercial <br /> experience</p>
    </div>
</section>

@code {
    private DateTime TotalExperienceStart { get; } = new DateTime(2012, 10, 1);
    private DateTime CommercialExperienceStart { get; } = new DateTime(2017, 8, 28);

    private int YearsOfTotalExperience { get; set; }
    private int YearsOfCommercialExperience { get; set; }

    private string YearsOfTotalExperienceStyle { get; set; } = String.Empty;
    private string YearsOfCommercialExperienceStyle { get; set; } = String.Empty;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        this.YearsOfTotalExperience = this.CalculateYearsFromDate(this.TotalExperienceStart);
        this.YearsOfCommercialExperience = this.CalculateYearsFromDate(this.CommercialExperienceStart);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            this.YearsOfTotalExperienceStyle = $"--num: {this.YearsOfTotalExperience}";
            this.YearsOfCommercialExperienceStyle = $"--num: {this.YearsOfCommercialExperience}";

            await Task.Delay(1);

            this.StateHasChanged();
        }
    }

    private int CalculateYearsFromDate(DateTime date)
    {
        var today = DateTime.Today;

        int result = today.Year - date.Year;

        if (date.Date > today.AddYears(-result))
        {
            result--;
        }

        return result;
    }
}
